[
  {
    "objectID": "age_reference_plots.html",
    "href": "age_reference_plots.html",
    "title": "Age reference plots",
    "section": "",
    "text": "source\n\nAgeRefPlot\n\n AgeRefPlot (data:pandas.core.frame.DataFrame, val_col:str,\n             age_col:str='age_at_research_stage', sex_col:str='sex',\n             sex:Optional[int]=None, val_color:Optional[str]=None,\n             ax_main:Optional[matplotlib.axes._axes.Axes]=None,\n             ax_agehist:Optional[matplotlib.axes._axes.Axes]=None,\n             ax_valhist:Optional[matplotlib.axes._axes.Axes]=None,\n             age_bins:Optional[numpy.ndarray]=None,\n             val_bins:Optional[numpy.ndarray]=None, linear_fit:bool=True,\n             lowess:bool=False, top_disp_perc:float=99,\n             bottom_disp_perc:float=1, percentiles_type:str='summary',\n             robust:bool=True, scale:float=1.0,\n             transform:Optional[Callable]=None, make_fig:bool=True)\n\nInitializes the AgeRefPlot class.\nArgs: data (pd.DataFrame): A pandas DataFrame containing the data. val_col (str): The name of the value column in the DataFrame. age_col (str): The name of the age column in the DataFrame. sex_col (str): The name of the sex column in the DataFrame. sex (Optional[int], optional): The sex to filter the data by. 0 for females and 1 for males. Defaults to None. val_color (Optional[str], optional): The color to use for the value plot. Defaults to None. ax_main (Optional[plt.Axes], optional): The main axis for the plot. Defaults to None. ax_agehist (Optional[plt.Axes], optional): The axis for the age histogram. Defaults to None. ax_valhist (Optional[plt.Axes], optional): The axis for the value histogram. Defaults to None. age_bins (Optional[np.ndarray], optional): The age bins for the histograms. Defaults to None. val_bins (Optional[np.ndarray], optional): The value bins for the histograms. Defaults to None. linear_fit (bool, optional): Whether to perform a linear fit on the data. Defaults to True. lowess (bool, optional): Whether to perform lowess smoothing on the data. Defaults to False. top_disp_perc (float, optional): The top percentile to use for display. Defaults to 99. bottom_disp_perc (float, optional): The bottom percentile to use for display. Defaults to 1. percentiles_type (str, optional): The type of percentiles to use. Must be one of [‘summary’, ‘1-percent intervals’, ‘5-percent intervals’, ‘10-percent intervals’]. Defaults to ‘summary’. robust (bool, optional): Whether to use a robust regression method (HuberRegressor) instead of ordinary least squares for linear_fit. Defaults to True. scale (float, optional): The scaling factor for the value column. Defaults to 1. transform (Optional[Callable], optional): The transformation function to apply to the value column. Defaults make_fig (bool, optional): Whether to create a new figure if axes are not provided. Defaults to True.\n\ndata = generate_synthetic_data(n=1000)\n\n\nrefplot = AgeRefPlot(data, \"val1\")\nrefplot.plot()\n\n\nsource\n\n\nGenderAgeRefPlot\n\n GenderAgeRefPlot (data:pandas.core.frame.DataFrame, val_col:str,\n                   age_col:str='age_at_research_stage', sex_col:str='sex',\n                   age_bins:Optional[numpy.ndarray]=None,\n                   val_bins:Optional[numpy.ndarray]=None,\n                   linear_fit:bool=True, lowess:bool=False,\n                   top_disp_perc:float=99, bottom_disp_perc:float=1,\n                   percentiles_type:str='summary', robust:bool=True,\n                   scale:float=1.0, transform:Optional[Callable]=None)\n\nInitializes the GenderAgeRefPlot class.\nArgs: data (pd.DataFrame): The input data containing age, value, and gender columns. val_col (str): The name of the value column in the data. age_col (str): The name of the age column in the DataFrame. sex_col (str): The name of the sex column in the DataFrame. age_bins (np.ndarray, optional): An array of age bin edges. val_bins (np.ndarray, optional): An array of value bin edges. linear_fit (bool, optional): Whether to fit a linear regression line. Defaults to True. lowess (bool, optional): Whether to fit a LOWESS curve. Defaults to False. top_disp_perc (float, optional): The top percentile for data display. Defaults to 99. bottom_disp_perc (float, optional): The bottom percentile for data display. Defaults to 1. percentiles_type (str, optional): The type of percentile calculation. Defaults to ‘summary’. robust (bool, optional): Whether to use a robust linear regression. Defaults to True. scale (float, optional): The scaling factor for the data. Defaults to 1. transform (Callable, optional): An optional function to apply to the data. Defaults to None.\n\ngender_refplots = GenderAgeRefPlot(data, \"val1\")\ngender_refplots.plot()"
  },
  {
    "objectID": "basic_plots.html",
    "href": "basic_plots.html",
    "title": "Basic plots",
    "section": "",
    "text": "source\n\nhist_ecdf_plots\n\n hist_ecdf_plots (data:pandas.core.frame.DataFrame, col:str,\n                  feature_str:Optional[str]=None, gender_col:str='sex')\n\nPlots histograms and empirical cumulative distribution functions (ECDFs) from a DataFrame for a specific column.\nArgs: data: The input DataFrame containing the data to plot. col: The column name to plot. feature_str: The title of the plot. If not provided, the column name will be used. gender_col: The column name indicating sex (default is ‘sex’ - female:0; male:1).\nReturns: None\n\ndata = generate_synthetic_data(n=1000)\nhist_ecdf_plots(data=data, col=\"val1\")"
  },
  {
    "objectID": "blandaltman_plots.html",
    "href": "blandaltman_plots.html",
    "title": "Bland-Altman plots",
    "section": "",
    "text": "source\n\nbland_altman_triple_plot\n\n bland_altman_triple_plot (data:pandas.core.frame.DataFrame, m1_col:str,\n                           m2_col:str, feature_str:str='')\n\nGenerates a triple plot consisting of a scatter correlation plot, Bland-Altman plot, and a percentage Bland-Altman plot.\nArgs: data (pd.DataFrame): A pandas DataFrame containing the data. m1_col (str): The name of the first measurement column in the DataFrame. m2_col (str): The name of the second measurement column in the DataFrame. feature_str (str, optional): A string to include in the title of the plots. Defaults to ““.\nReturns: None\n\ndata = generate_synthetic_data(n=1000)\n\nbland_altman_triple_plot(data=data, m1_col=\"val1\",m2_col=\"val2\")"
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "Config",
    "section": "",
    "text": "source\n\ngenerate_synthetic_data\n\n generate_synthetic_data (n:int=1000)\n\nGenerates a sample DataFrame containing age, gender, and value data.\nArgs: n: The number of rows in the generated DataFrame.\nReturns: A pandas DataFrame with columns ‘age’, ‘gender’, and ‘val’.\n\ndata = generate_synthetic_data()\ndata.head()\n\n\n\n\n\n  \n    \n      \n      date_of_research_stage\n      age_at_research_stage\n      sex\n      val1\n      val2\n    \n    \n      participant_id\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      2021-07-28\n      57.764984\n      1\n      124.977830\n      56.731941\n    \n    \n      1\n      2021-12-24\n      64.400381\n      0\n      88.942255\n      43.921269\n    \n    \n      2\n      2020-02-25\n      72.453599\n      0\n      79.310799\n      41.031832\n    \n    \n      3\n      2020-10-08\n      62.306085\n      0\n      61.970616\n      35.829777\n    \n    \n      4\n      2021-01-12\n      43.778984\n      0\n      78.667657\n      40.838890"
  },
  {
    "objectID": "date_plots.html",
    "href": "date_plots.html",
    "title": "Dates plots",
    "section": "",
    "text": "source\n\ndates_dist_plot\n\n dates_dist_plot (df:pandas.core.frame.DataFrame, col:str,\n                  sampling_period:str='W-MON', ax:Union[ForwardRef('Extens\n                  ionArray'),numpy.ndarray,ForwardRef('Index'),ForwardRef(\n                  'Series'),List,range,NoneType]=None,\n                  date_index:str='Date',\n                  ylim:Optional[Tuple[float,float]]=None,\n                  quantiles:Optional[List[Tuple[float,str]]]=None)\n\nCreates a scatter plot of data points and their statistics based on a specified sampling period.\nArgs: df (pd.DataFrame): The input DataFrame containing the data. col (str): The column name in the DataFrame to plot. sampling_period (str, optional): The frequency to resample the data. Defaults to ‘W-MON’. ax (Optional[Axes], optional): A matplotlib axes object to plot on. Defaults to None. date_index (str, optional): The name of the date index in the DataFrame. Defaults to ‘Date’. ylim (Optional[Tuple[float, float]], optional): A tuple defining the y-axis limits. Defaults to None. quantiles (Optional[List[Tuple[float, str]]], optional): A list of tuples containing quantiles and their labels. Defaults to [(0.1, “10%”), (0.9, “90%”)].\n\ndata = generate_synthetic_data()"
  },
  {
    "objectID": "data_loader.html",
    "href": "data_loader.html",
    "title": "Data loader",
    "section": "",
    "text": "source\n\nDataLoader\n\n DataLoader (dataset:str, cohort:str='10k',\n             base_path:str='/home/ec2-user/studies/',\n             age_sex_dataset:str='Population_Characteristics',\n             unique_index:bool=False, valid_dates:bool=False,\n             valid_stage:bool=False, errors:str='raise')\n\nClass to load multiple tables from a dataset and allows to easily access their fields.\nArgs:\ndataset (str): The name of the dataset to load.\ncohort (str, optional): The name of the cohort within the dataset. Defaults to '10k'.\nbase_path (str, optional): The base path where the data is stored. Defaults to '/home/ec2-user/studies'.\nage_sex_dataset (str, optional): The name of the dataset to use for computing age and sex. Defaults to 'Population_Characteristics'.\nunique_index (bool, optional): Whether to ensure the index of the data is unique. Defaults to False.\nvalid_dates (bool, optional): Whether to ensure that all timestamps in the data are valid dates. Defaults to False.\nvalid_stage (bool, optional): Whether to ensure that all research stages in the data are valid. Defaults to False.\nerrors (str, optional): Whether to raise an error or issue a warning if missing data is encountered.\n    Possible values are 'raise' and 'warn'. Defaults to 'raise'.\nAttributes:\ndict (pd.DataFrame): The data dictionary for the dataset, containing information about each field.\ndfs (dict): A dictionary of dataframes, one for each table in the dataset.\nfields (list): A list of all fields in the dataset.\ndataset (str): The name of the dataset being used.\ncohort (str): The name of the cohort being used.\nbase_path (str): The base path where the data is stored.\nage_sex_dataset (str): The name of the dataset being used to compute age and sex.\nunique_index (bool): Whether to ensure the index of the data is unique.\nvalid_dates (bool): Whether to ensure that all timestamps in the data are valid dates.\nvalid_stage (bool): Whether to ensure that all research stages in the data are valid.\nerrors (str): Whether to raise an error or issue a warning if missing data is encountered.\nUse the dataset name to load the dataset. It may contain multiple tables. Age / sex will be added to the data by default.\n\ndl = DataLoader('Fundus')\ndl\n\nDataLoader for fundus with\n78 fields\n2 tables: ['fundus', 'age_sex']\n\n\nThe data dictionary of the dataset displays the description of each field.\n\ndl.dict.head(5)\n\n\n\n\n\n  \n    \n      \n      field_string\n      description_string\n      parent_dataframe\n      relative_location\n      value_type\n      units\n      sampling_rate\n      item_type\n      array\n      cohorts\n      data_type\n      debut\n      pandas_dtype\n    \n    \n      tabular_field_name\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      fundus_image_left\n      Fundus image (left)\n      Fundus image (left)\n      NaN\n      fundus.parquet\n      Text\n      None\n      NaN\n      Bulk\n      Single\n      10K\n      image\n      2021-02-17\n      string\n    \n    \n      fundus_image_right\n      Fundus image (right)\n      Fundus image (right)\n      NaN\n      fundus.parquet\n      Text\n      None\n      NaN\n      Bulk\n      Single\n      10K\n      image\n      2021-02-17\n      string\n    \n    \n      collection_date\n      Collection date (YYYY-MM-DD)\n      Collection date (YYYY-MM-DD)\n      NaN\n      fundus.parquet\n      Date\n      Time\n      NaN\n      Data\n      Single\n      10K\n      tabular\n      2021-02-17\n      datetime64[ns]\n    \n    \n      timezone\n      Timezone\n      Timezone for timestamp columns\n      NaN\n      fundus.parquet\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      string\n    \n    \n      collection_timestamp\n      Collection timestamp\n      Collection timestamp\n      NaN\n      fundus.parquet\n      NaN\n      Time\n      NaN\n      Data\n      Single\n      10K\n      tabular\n      NaN\n      datetime64[ns, Asia/Jerusalem]\n    \n  \n\n\n\n\nAll availbale fields (columns) in all tables can be listed.\n\ndl.fields[:5]\n\n['distance_tortuosity_right',\n 'fundus_image_quality_good_score_right',\n 'average_width_left',\n 'artery_vessel_density_left',\n 'artery_distance_tortuosity_right']\n\n\nAccess any of the fields (e.g., vein_average_width_right, age) or indices (e.g., research_stage) from any of the tables via the data loader API.\n\ndl[['research_stage', 'vein_average_width_right', 'age', 'sex']].loc[5309837561]\n\n\n\n\n\n  \n    \n      \n      \n      \n      vein_average_width_right\n      sex\n      age\n      research_stage\n    \n    \n      cohort\n      research_stage\n      array_index\n      \n      \n      \n      \n    \n  \n  \n    \n      10k\n      02_00_visit\n      0\n      19196.368856\n      1\n      56.8\n      02_00_visit\n    \n  \n\n\n\n\nAccess time series or bulk data that is stored separately for each sample via the data loader API. In the following example, the data loader retrieves the relative path of each sample’s bulk file from the main table (where it is stored in the field fundus_image_left), converts it to an absolute path, and loads the file. This is repeated for 3 samples and returned as a list. In the case of parquet DataFrames, there is no need to define the load_func and the results are concatenated by deafult.\n\nfrom PIL import Image\nfrom smart_open import open\n\n\ndef load_image(path):\n    return Image.open(open(path, 'rb'))\n\ndl.load_sample('fundus_image_left', [5950288169, 5948791269, 5580301087], load_func=load_image, concat=False)\n\n[<PIL.PngImagePlugin.PngImageFile image mode=RGB size=3494x3494>,\n <PIL.PngImagePlugin.PngImageFile image mode=RGB size=3500x3500>,\n <PIL.PngImagePlugin.PngImageFile image mode=RGB size=3458x3458>]"
  }
]